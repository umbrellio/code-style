inherit_gem:
  rubocop-config-umbrellio: lib/rubocop.rspec.yml

AllCops:
  Exclude:
    - bin/**/*
    - node_modules/**/*

# Layout

Layout/AlignParameters:
  Enabled: true

Layout/IndentArray:
  # Good
  # foo([
  #   :first,
  #   :second,
  # ])
  # Bad
  # foo([
  #       :first,
  #       :second
  #     ])
  EnforcedStyle: consistent

Layout/IndentHash:
  EnforcedStyle: consistent

Layout/MultilineMethodCallIndentation:
  # We don't like this cop
  Enabled: false

Layout/MultilineOperationIndentation:
  Enabled: false

Layout/SpaceInLambdaLiteral:
  EnforcedStyle: require_space

Layout/SpaceInsideBrackets:
  Enabled: false

# Lint

Lint/AmbiguousBlockAssociation:
  # `scope :name, -> (param) { ... }` is a valid syntax
  Enabled: false

Lint/AmbiguousOperator:
  Enabled: false

Lint/EmptyWhen:
  # Good:
  # case x
  # when :foo
  #   # return nil
  # when :bar
  #   :bar
  # else
  #   :baz
  # end
  Enabled: false

Lint/NonLocalExitFromIterator:
  Enabled: false

Lint/HandleExceptions:
  Enabled: false

Lint/RescueType:
  # It's generally useless, but why not?
  Enabled: true

Lint/RescueWithoutErrorClass:
  # We forced `rescue` over `rescue StandardError`
  Enabled: false

Lint/ShadowingOuterLocalVariable:
  Enabled: false

Lint/ScriptPermission:
  # checks +x on scripts
  Enabled: true

# Metrics

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/LineLength:
  Max: 100
  AllowHeredoc: false
  AllowURI: false
  Exclude:
    - Gemfile

Metrics/MethodLength:
  Max: 20

Metrics/PerceivedComplexity:
  Enabled: false

# Naming

Naming/AccessorMethodName:
  # This cop assumes every method is accessor
  Enabled: false

Naming/PredicateName:
  # `has_` is generally good
  NamePrefixBlacklist:
    - is_

# Performance

Performance/Caller:
  Enabled: true

Performance/Casecmp:
  Enabled: false

# Performance

Performance/UnfreezeString:
  Enabled: true

# Security

Security/YAMLLoad:
  Enabled: false

# Style

Style/AndOr:
  # `do_something and return`
  Enabled: false

Style/ClassAndModuleChildren:
  # Enable it in non-rails projects with EnforcedStyle you prefer
  Enabled: false

Style/CommentAnnotation:
  # Also, i think that better to use yard's `@todo` and other in ruby code
  Enabled: false

Style/ConditionalAssignment:
  Enabled: false

Style/Dir:
  Enabled: true

Style/Documentation:
  Enabled: false

Style/DoubleNegation:
  # Always return booleans in predicates
  Enabled: false

Style/EmptyCaseCondition:
  Enabled: false

Style/EmptyElse:
  Enabled: false

Style/Encoding:
  Enabled: false

Style/FormatStringToken:
  # Bad
  # [7] pry(main)> format "%{foo}", foo: 123
  # => "123"
  # Good
  # [8] pry(main)> format "%<foo>s", foo: 123
  # => "123"
  # Also good
  # [9] pry(main)> format "%<foo>f", foo: 123
  # => "123.000000"
  Enabled: true

Style/IfUnlessModifier:
  Enabled: true

Style/GuardClause:
  Enabled: false

Style/LambdaCall:
  Enabled: false

Style/ModuleFunction:
  Enabled: false

Style/MultilineTernaryOperator:
  Enabled: false

Style/MultipleComparison:
  # Bad
  # if foo == 1 || foo == 2
  # Good
  # [1, 2].include?(foo)
  # With activesupport, this is better
  # foo.in? [1, 2]
  Enabled: true

Style/NumericLiterals:
  Description: 'Use indent in groups of 3 unlesss you meet project-specific rule'
  Enabled: false

Style/ParallelAssignment:
  Enabled: false

Style/PerlBackrefs:
  # Disable localy if realy neeeded
  Enabled: true

Style/RaiseArgs:
  Description: 'Use `raise, ErrorClass` in all cases but not when you need ErrorClass constructor'
  Enabled: false

Style/RedundantConditional:
  Enabled: true

Style/RegexpLiteral:
  EnforcedStyle: mixed
  Enabled: true

Style/RescueModifier:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes
  ConsistentQuotesInMultiline: true

Style/SignalException:
  EnforcedStyle: only_raise

Style/SingleLineBlockParams:
  Enabled: false

Style/StringLiteralsInInterpolation:
  Enabled: false

Style/SymbolArray:
  # Be consistent
  # Good, array of symbols expected
  # :foo.in? &i[foo bar]
  # Good, link_to receives array of generic objects
  # link_to [:admin, :users]
  # Good, if second is not a symbol array, first is not expected to be
  # [
  #   [:foo, :bar]
  #   [:boo, :bar, baz: true]
  # ]
  Enabled: false

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInLiteral:
  EnforcedStyleForMultiline: comma

Style/TrivialAccessors:
  AllowPredicates: true
  Enabled: false

Style/YodaCondition:
  # REVIEW: i sure that we don't need it
  Enabled: false
